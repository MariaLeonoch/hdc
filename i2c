
#include "stm32f1xx.h"

/////////////////////////////
int i2c_init()
{
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
  RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;

  GPIOB->CRL &= ~0xFF000000;
  GPIOB->CRL |= 0xAA000000;

  I2C1->CR2 =8;
   
  I2C1->CCR =0x28; /////CHASTOTA SCL-????
   
  I2C1->TRISE=9;/////-?????
   
  I2C1->CR1 = I2C_CR1_PE;
  return 0;
}

int i2c_start()
{
  I2C1->CR1 |=I2C_CR1_ACK;
I2C1->CR1 |=I2C_CR1_START;
   
while (1){
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_SB)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }

}
(void)I2C1->SR1;
  return 0;
}

int i2c_stop()
{
 I2C1->CR1 |= I2C_CR1_STOP; 
    return 0;
}



int i2c_read(uint8_t addr, uint8_t *data, int size)
{
  i2c_start();
     
  I2C1->DR = addr; ///// peredaem adres ystr-va(I2C address of the HDC1080 is 1000000)-????
  while(1){
  uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_ADDR)
   {break;}
   if (temp & I2C_SR1_AF)
   {
     I2C1->SR1 &=~I2C_SR1_AF;
     return -1;
   }
  };
  (void) I2C1->SR1;
  (void) I2C1->SR2;
/*
  I2C1->DR = 0x02;  //// peredaem adres registra
  while(!(I2C1->SR1 & I2C_SR1_TXE)){};
  I2C1->DR = 0x10; 
  while(!(I2C1->SR1 & I2C_SR1_TXE)){};
  I2C1->DR = 0x00; */
  
  for (int i=0; i<size; i++)
  {
    while(!(I2C1->SR1 & I2C_SR1_TXE)){};
    I2C1->DR = data[i];
  }
  
  while(!(I2C1->SR1 & I2C_SR1_TXE)){};
  i2c_stop();
  return 0;
}

int i2c_write(uint8_t addr, uint8_t *data, int size)
{
i2c_start();
     
 I2C1->DR = adrr; ///// peredaem adres ystr-va(I2C address of the HDC1080 is 1000000)-????
 while(1) {
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_ADDR)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
 };
 (void) I2C1->SR1;
 (void) I2C1->SR2;
 
I2C1->DR = data;  //// peredaem adres registra
while(1){
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_TXE)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
}


  for (int i=0; i<size; i++)
  {
while(1){
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_RXNE)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
}
otv[i] = I2C1->DR;
  }


end:
  return 0;
}
