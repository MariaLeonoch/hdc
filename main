#include "main.h"
#include "stm32f1xx.h"
static uint32_t timestamp = 0;

static uint16_t ot = 0;
static uint8_t ustr = 0;
static uint8_t registr = 0;


void SystemClock_Config(void);
void nastr();
void nastrt();
void read(uint8_t, uint8_t);
void write(uint8_t, uint8_t);

void delay_ms(uint32_t time)
{
  uint32_t ts = timestamp + 1000;
  if (ts < timestamp) {
    while(timestamp > ts){;};
    while(timestamp < ts){;};
  } else {
    while(timestamp < ts){;};
  }
}

int main(void)
{
  SystemClock_Config();

 /* RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
  GPIOB->CRH &=~(0xFF<<24);
  GPIOB->CRH |= (0x11<<24); ///// gpio in output mode 
  while (1)
  {
    GPIOB->ODR |= 1<<14;
    delay_ms(500);
    GPIOB->ODR |= 1<<15;
    delay_ms(500);
    GPIOB->ODR &= ~(1<<14);
    delay_ms(500);
    GPIOB->ODR &= ~(1<<15);
    delay_ms(500);
  }*/
  
  nastr();
  nastrt();
  while(1)
  {
    ustr = 0x80;
    registr = 0x00;
    read(ustr, registr);
    delay_ms (500);
    
    ustr = 0x81;
    write(ustr, registr);
    delay_ms (500);
  }
  while(1){};
  
  
}

void SystemClock_Config(void)
{

  SystemInit();
  SysTick_Config(SystemCoreClock / 1000 / 4);
}

void SysTick_Handler(void)
{
  timestamp+=1;
}

void Error_Handler(void)
{
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
  while(1)
  {
    ;
  };
}
#endif

/////////////////////////////
void nastr()
{
RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 

GPIOB->CRL &= ~0xFF000000;
GPIOB->CRL |= 0xAA000000;

 
I2C1->CR2 =8;
 
I2C1->CCR =0x28; /////CHASTOTA SCL-????
 
I2C1->TRISE=9;/////-?????
 
I2C1->CR1 = I2C_CR1_PE;
}
 
void nastrt()
{

I2C1->CR1 |=I2C_CR1_ACK;
I2C1->CR1 |=I2C_CR1_START;
   
while (!(I2C1->SR1 & I2C_SR1_SB)){};
(void)I2C1->SR1;
     
 I2C1->DR = 0x80; ///// peredaem adres ystr-va(I2C address of the HDC1080 is 1000000)-????
 while(1){
 uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_ADDR)
   {break;}
   if (temp & I2C_SR1_AF)
   {
     I2C1->SR1 &=~I2C_SR1_AF;
     return;
   }
 };
 (void) I2C1->SR1;
 (void) I2C1->SR2;
 
I2C1->DR = 0x02;  //// peredaem adres registra
while(!(I2C1->SR1 & I2C_SR1_TXE)){};
I2C1->DR = 0x10; 
while(!(I2C1->SR1 & I2C_SR1_TXE)){};
I2C1->DR = 0x00; 
while(!(I2C1->SR1 & I2C_SR1_TXE)){};
 I2C1->CR1 |= I2C_CR1_STOP; 

}


  static uint8_t otv[2];
 
void write(uint8_t ustr, uint8_t registr)
{

I2C1->CR1 |=I2C_CR1_ACK;
I2C1->CR1 |=I2C_CR1_START;
   
while (1){
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_SB)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
};
(void)I2C1->SR1;
     
 I2C1->DR = ustr; ///// peredaem adres ystr-va(I2C address of the HDC1080 is 1000000)-????
 while(1) {
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_ADDR)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
 };
 (void) I2C1->SR1;
 (void) I2C1->SR2;
 
I2C1->DR = registr;  //// peredaem adres registra
while(1){
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_TXE)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
};
 I2C1->CR1 |= I2C_CR1_STOP;

end:
}

void read(uint8_t ustr, uint8_t registr)
{
I2C1->CR1 |= I2C_CR1_START;  ////START
 while(1){
    uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_SB)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
 };
 (void) I2C1->SR1;
  
I2C1->DR = ustr; //// peredaem adres ystr-va DLIA CHTENIA
 while(1){
    uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_ADDR)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
 };
 (void) I2C1->SR1;
 (void) I2C1->SR2;
  
while(1){
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_RXNE)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
};
otv[0] = I2C1->DR;

I2C1->CR1 &= ~I2C_CR1_ACK;  ////chitaem
while(1){
   uint32_t temp;
   temp = I2C1->SR1;
   if (temp & I2C_SR1_RXNE)
   {break;}
     
  if (temp & I2C_SR1_AF)
  {
    I2C1->SR1 &=~I2C_SR1_AF;
    goto end;
  }
};
otv[1] = I2C1->DR;

end:
 I2C1->CR1 |=I2C_CR1_STOP;
 
 ot = (otv[0]<<8) | otv[1];
 
}
